type: edu
files:
- name: src/cinema/Main.java
  visible: true
  text: |
    package cinema;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: true
  text: |-
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["src/resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
    }
  learner_created: false
- name: src/resources/application.properties
  visible: true
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: test/CinemaTests.java
  visible: false
  text: |-
    import cinema.Main;
    import com.google.gson.Gson;
    import com.google.gson.JsonObject;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;
    import org.hyperskill.hstest.testcase.CheckResult;

    import java.util.Map;
    import java.util.UUID;

    import static org.hyperskill.hstest.testing.expect.Expectation.expect;
    import static org.hyperskill.hstest.testing.expect.json.JsonChecker.*;

    public class CinemaTests extends SpringTest {

        private static final String ALREADY_PURCHASED_ERROR_MESSAGE = "The ticket has been already purchased!";
        private static final String OUT_OF_BOUNDS_ERROR_MESSAGE = "The number of a row or a column is out of bounds!";
        private static final String WRONG_TOKEN_ERROR_MESSAGE = "Wrong token!";
        private static final String WRONG_PASSWORD_MESSAGE = "The password is wrong!";

        private static final Gson gson = new Gson();

        private static String token = "";

        public CinemaTests() {
            super(Main.class);
        }

        private static void checkStatusCode(HttpResponse resp, int status) {
            if (resp.getStatusCode() != status) {
                throw new WrongAnswer(
                    resp.getRequest().getMethod() + " " +
                        resp.getRequest().getLocalUri() +
                        " should respond with status code " + status + ", " +
                        "responded: " + resp.getStatusCode() + "\n\n" +
                        "Response body:\n\n" + resp.getContent()
                );
            }
        }

        CheckResult testEndpoint() {
            HttpResponse response = get("/seats").send();
            checkStatusCode(response, 200);
            return CheckResult.correct();
        }

        CheckResult testEndpointAvailableSeats() {
            HttpResponse response = get("/seats").send();
            expect(response.getContent()).asJson().check(
                isObject()
                    .value("available_seats",
                        isArray(
                            81,
                            isObject()
                                .value("row", isInteger(i -> i >= 1 && i <= 9))
                                .value("column", isInteger(i -> i >= 1 && i <= 9))
                                .value("price", isInteger(price -> price == 10 || price == 8))
                        )
                    )
                    .value("total_columns", 9)
                    .value("total_rows", 9)
            );
            return CheckResult.correct();
        }

        CheckResult testPurchaseTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 1)
                                .value("column", 1)
                                .value("price", 10)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatTicketHasBeenPurchased() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", ALREADY_PURCHASED_ERROR_MESSAGE)
                        .anyOtherValues()
                );
            return CheckResult.correct();
        }

        CheckResult testErrorMessageThatNumbersOutOfBounds() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "10",
                    "column", "1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "1",
                    "column", "10"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );

            response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "-1",
                    "column", "-1"
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("error", OUT_OF_BOUNDS_ERROR_MESSAGE)
                        .anyOtherValues()
                );


            return CheckResult.correct();
        }

        CheckResult testReturnTicket() {

            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", 2,
                    "column", 5
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 2)
                                .value("column", 5)
                                .value("price", 10)
                        )
                );

            JsonObject jsonResponse = gson.fromJson(response.getContent(), JsonObject.class);

            String tokenFromResponse = jsonResponse.get("token").getAsString();
            String wrongToken = UUID.randomUUID().toString();

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", wrongToken
                ))
            ).send();

            checkStatusCode(response, 400);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_TOKEN_ERROR_MESSAGE)
                    .anyOtherValues()
            );

            response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", tokenFromResponse
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 2)
                            .value("column", 5)
                            .value("price", 10)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testStatsEndpoint() {

            HttpResponse response = post("/stats", "").send();
            checkStatusCode(response, 401);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("error", WRONG_PASSWORD_MESSAGE)
                    .anyOtherValues()
            );


            return CheckResult.correct();
        }

        CheckResult testStats(int numberOfPurchasedTickets, int currentIncome, int availableSeats) {
            Map<String, String> requestParams = Map.of("password", "super_secret");
            HttpResponse response = post("/stats", requestParams).send();
            checkStatusCode(response, 200);

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("number_of_purchased_tickets", numberOfPurchasedTickets)
                    .value("current_income", currentIncome)
                    .value("number_of_available_seats", availableSeats)
            );

            return CheckResult.correct();
        }

        CheckResult returnTicket() {
            HttpResponse response = post(
                "/return",
                gson.toJson(Map.of(
                    "token", token
                ))
            ).send();

            expect(response.getContent()).asJson().check(
                isObject()
                    .value("returned_ticket",
                        isObject()
                            .value("row", 7)
                            .value("column", 4)
                            .value("price", 8)
                    )
            );

            return CheckResult.correct();
        }

        CheckResult testPurchaseAnotherTicket() {
            HttpResponse response = post(
                "/purchase",
                gson.toJson(Map.of(
                    "row", "7",
                    "column", "4"
                ))
            ).send();

            checkStatusCode(response, 200);

            expect(response.getContent()).asJson()
                .check(
                    isObject()
                        .value("token", isString())
                        .value("ticket",
                            isObject()
                                .value("row", 7)
                                .value("column", 4)
                                .value("price", 8)
                        )
                );

            JsonObject object = gson.fromJson(response.getContent(), JsonObject.class);
            token = object.get("token").getAsString();

            return CheckResult.correct();
        }

        @DynamicTest
        DynamicTesting[] dynamicTests = new DynamicTesting[]{
            this::testEndpoint,
            this::testEndpointAvailableSeats,
            this::testPurchaseTicket,
            this::testErrorMessageThatTicketHasBeenPurchased,
            this::testErrorMessageThatNumbersOutOfBounds,
            this::testReturnTicket,
            this::testStatsEndpoint,
            () -> testStats(1, 10, 80),
            this::testPurchaseAnotherTicket,
            () -> testStats(2, 18, 79),
            this::returnTicket,
            () -> testStats(1, 10, 80),
        };
    }
  learner_created: false
- name: src/cinema/Seat.java
  visible: true
  text: |
    package cinema;

    import com.fasterxml.jackson.annotation.JsonIgnore;

    public class Seat {
        private int row;
        private int column;
        private int price;
        @JsonIgnore
        private boolean sold = false;

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public Seat() {
        }

        public Seat(int row, int column, int price) {
            this.row = row;
            this.column = column;
            this.price = price;
        }

        public int getPrice() {
            return price;
        }

        public void setPrice(int price) {
            this.price = price;
        }

        public boolean isSold() {
            return sold;
        }

        public void setSold(boolean sold) {
            this.sold = sold;
        }
    }
  learner_created: true
- name: src/cinema/dto/ReturnTicketResponse.java
  visible: true
  text: |
    package cinema.dto;

    import cinema.Seat;

    public class ReturnTicketResponse {
        private Seat returned_ticket;

        public ReturnTicketResponse(Seat returned_ticket) {
            this.returned_ticket = returned_ticket;
        }

        public ReturnTicketResponse() {
        }

        public Seat getReturned_ticket() {
            return returned_ticket;
        }

        public void setReturned_ticket(Seat returned_ticket) {
            this.returned_ticket = returned_ticket;
        }
    }
  learner_created: true
- name: src/cinema/controllers/CinemaController.java
  visible: true
  text: |
    package cinema.controllers;

    import cinema.Seat;
    import cinema.Ticket;
    import cinema.dto.BuyTicket;
    import cinema.dto.ReturnTicketRequest;
    import cinema.dto.ReturnTicketResponse;
    import cinema.dto.SoldResponse;
    import cinema.exception.AlreadyPurchasedException;
    import org.springframework.http.HttpStatus;
    import org.springframework.http.ResponseEntity;
    import org.springframework.web.bind.annotation.GetMapping;
    import org.springframework.web.bind.annotation.PostMapping;
    import org.springframework.web.bind.annotation.RequestBody;
    import org.springframework.web.bind.annotation.RestController;

    import java.util.*;

    import static cinema.utils.CinemaUtils.getPrice;

    @RestController
    public class CinemaController {
        private static int rows = 9;
        private static int columns = 9;
        private static List<Seat> seats = new ArrayList<>();
        private static List<Ticket> tickets = new ArrayList<>();

        static {
            for (int i = 0; i < rows; i++) {
                for (int j = 0; j < columns; j++) {
                    seats.add(new Seat(i+1, j+1, getPrice(i+1)));
                }
            }
        }

        @GetMapping("/seats")
        public Map<String, Object> getSeats() {
            Map<String, Object> response = new HashMap<>();
            response.put("total_rows", rows);
            response.put("total_columns", columns);
            response.put("available_seats", seats);
            return response;
        }

        @PostMapping("/purchase")
        public ResponseEntity<Object> buyTicket(@RequestBody BuyTicket request) {
            try {
                Seat seat = seats
                        .stream()
                        .filter(v -> v.getRow() == request.getRow() && v.getColumn() == request.getColumn())
                        .findFirst().orElse(null);

                if (seat == null) {
                    throw new IndexOutOfBoundsException("The number of a row or a column is out of bounds!");
                }

                if (seat.isSold()) {
                    throw new AlreadyPurchasedException("The ticket has been already purchased!");
                }

                seat.setSold(true);
                Ticket ticket = new Ticket(UUID.randomUUID().toString(), seat);
                tickets.add(ticket);

                return new ResponseEntity<>(ticket, HttpStatus.OK);
            } catch (AlreadyPurchasedException exception) {
                return new ResponseEntity<>(new SoldResponse(exception.getMessage()), HttpStatus.BAD_REQUEST);
            } catch (IndexOutOfBoundsException exception) {
                return new ResponseEntity<>(new SoldResponse(exception.getMessage()), HttpStatus.BAD_REQUEST);
            }
        }

        @PostMapping("/return")
        public ResponseEntity<Object> returnTicket(@RequestBody ReturnTicketRequest request) {
            try {

            Ticket ticket = tickets
                    .stream()
                    .filter(v -> v.getToken().equals(request.getToken()))
                    .findFirst()
                    .orElseThrow(NoSuchElementException::new);

            Seat seat = ticket.getTicket();
            seat.setSold(false);

            return new ResponseEntity<>(new ReturnTicketResponse(seat), HttpStatus.OK);
            } catch (NoSuchElementException exception) {
                return new ResponseEntity<>(new SoldResponse("Wrong token!"), HttpStatus.BAD_REQUEST);
            }
        }
    }
  learner_created: true
- name: src/cinema/dto/SoldResponse.java
  visible: true
  text: |
    package cinema.dto;

    public class SoldResponse {
        private String error = "The ticket has been already purchased!";

        public SoldResponse(String error) {
            this.error = error;
        }

        public String getError() {
            return error;
        }

        public void setError(String error) {
            this.error = error;
        }

        public SoldResponse() {
        }
    }
  learner_created: true
- name: src/cinema/Ticket.java
  visible: true
  text: |
    package cinema;

    public class Ticket {
        private String token;
        private Seat ticket;

        public Ticket(String token, Seat ticket) {
            this.token = token;
            this.ticket = ticket;
        }

        public Ticket() {
        }

        public String getToken() {
            return token;
        }

        public void setToken(String token) {
            this.token = token;
        }

        public Seat getTicket() {
            return ticket;
        }

        public void setTicket(Seat ticket) {
            this.ticket = ticket;
        }
    }
  learner_created: true
- name: src/cinema/dto/ReturnTicketRequest.java
  visible: true
  text: |
    package cinema.dto;

    public class ReturnTicketRequest {
        private String token;

        public ReturnTicketRequest(String token) {
            this.token = token;
        }

        public ReturnTicketRequest() {
        }

        public String getToken() {
            return token;
        }

        public void setToken(String token) {
            this.token = token;
        }
    }
  learner_created: true
- name: src/cinema/exception/AlreadyPurchasedException.java
  visible: true
  text: |
    package cinema.exception;

    public class AlreadyPurchasedException extends RuntimeException{
        public AlreadyPurchasedException(String cause) {
            super(cause);
        }
    }
  learner_created: true
- name: src/cinema/utils/CinemaUtils.java
  visible: true
  text: |
    package cinema.utils;

    public class CinemaUtils {
        public static int getPrice(int row) {
            if (row <= 4)
                return 10;

            return 8;
        }
    }
  learner_created: true
- name: src/cinema/dto/BuyTicket.java
  visible: true
  text: |
    package cinema.dto;

    public class BuyTicket {
        private int row;
        private int column;

        public int getRow() {
            return row;
        }

        public void setRow(int row) {
            this.row = row;
        }

        public int getColumn() {
            return column;
        }

        public void setColumn(int column) {
            this.column = column;
        }

        public BuyTicket() {
        }

        public BuyTicket(int row, int column) {
            this.row = row;
            this.column = column;
        }
    }
  learner_created: true
- name: src/cinema/dto/StatisticResponse.java
  visible: true
  learner_created: true
- name: src/cinema/exception/WrongPasswordException.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/189/stages/948/implement#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">JetBrains
    Academy</a> to continue learning.
  time: Sun, 10 Jul 2022 16:23:18 UTC
record: -1
